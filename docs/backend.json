{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Papi Hair Design application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "firstName": {
          "type": "string",
          "description": "The user's first name."
        },
        "lastName": {
          "type": "string",
          "description": "The user's last name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "The user's phone number."
        },
        "address": {
          "type": "string",
          "description": "The user's address."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email"
      ]
    },
    "Service": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Service",
      "type": "object",
      "description": "Represents a service offered by the salon.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Service entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the service (e.g., 'Men's Cut', 'Coloring')."
        },
        "description": {
          "type": "string",
          "description": "A description of the service."
        },
        "price": {
          "type": "number",
          "description": "The price of the service."
        },
        "duration": {
          "type": "number",
          "description": "The duration of the service in minutes."
        }
      },
      "required": [
        "id",
        "name",
        "price",
        "duration"
      ]
    },
    "Stylist": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Stylist",
      "type": "object",
      "description": "Represents a stylist working at the salon.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Stylist entity."
        },
        "firstName": {
          "type": "string",
          "description": "The stylist's first name."
        },
        "lastName": {
          "type": "string",
          "description": "The stylist's last name."
        },
        "bio": {
          "type": "string",
          "description": "A short biography of the stylist."
        },
        "specialties": {
          "type": "array",
          "description": "An array of strings representing the stylist's specialties.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName"
      ]
    },
    "Appointment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Appointment",
      "type": "object",
      "description": "Represents an appointment booked by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Appointment entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Appointment)"
        },
        "serviceId": {
          "type": "string",
          "description": "Reference to Service. (Relationship: Service 1:N Appointment)"
        },
        "stylistId": {
          "type": "string",
          "description": "Reference to Stylist. (Relationship: Stylist 1:N Appointment)"
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the appointment.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the appointment.",
          "format": "date-time"
        },
        "notes": {
          "type": "string",
          "description": "Any notes related to the appointment."
        }
      },
      "required": [
        "id",
        "userId",
        "serviceId",
        "stylistId",
        "startTime",
        "endTime"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product sold in the e-commerce store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Product entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the product."
        },
        "description": {
          "type": "string",
          "description": "A description of the product."
        },
        "price": {
          "type": "number",
          "description": "The price of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product image.",
          "format": "uri"
        },
        "category": {
          "type": "string",
          "description": "The category of the product."
        },
        "stockQuantity": {
          "type": "number",
          "description": "The number of items currently in stock."
        }
      },
      "required": [
        "id",
        "name",
        "price",
        "imageUrl",
        "category",
        "stockQuantity"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order placed by a user in the e-commerce store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Order entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Order)"
        },
        "orderDate": {
          "type": "string",
          "description": "The date the order was placed.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "The total amount of the order."
        },
        "shippingAddress": {
          "type": "string",
          "description": "The shipping address for the order."
        },
        "status": {
          "type": "string",
          "description": "The current status of the order (e.g., 'Pending', 'Shipped', 'Delivered')."
        }
      },
      "required": [
        "id",
        "userId",
        "orderDate",
        "totalAmount",
        "shippingAddress",
        "status"
      ]
    },
    "OrderItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OrderItem",
      "type": "object",
      "description": "Represents a single item within an order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the OrderItem entity."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:N OrderItem)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N OrderItem)"
        },
        "quantity": {
          "type": "number",
          "description": "The quantity of the product in the order item."
        },
        "price": {
          "type": "number",
          "description": "The price of the product at the time of the order."
        }
      },
      "required": [
        "id",
        "orderId",
        "productId",
        "quantity",
        "price"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Uses path-based ownership for private user data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/services/{serviceId}",
        "definition": {
          "entityName": "Service",
          "schema": {
            "$ref": "#/backend/entities/Service"
          },
          "description": "Stores information about the salon's services.",
          "params": [
            {
              "name": "serviceId",
              "description": "The unique identifier for the service."
            }
          ]
        }
      },
      {
        "path": "/stylists/{stylistId}",
        "definition": {
          "entityName": "Stylist",
          "schema": {
            "$ref": "#/backend/entities/Stylist"
          },
          "description": "Stores information about the salon's stylists.",
          "params": [
            {
              "name": "stylistId",
              "description": "The unique identifier for the stylist."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/appointments/{appointmentId}",
        "definition": {
          "entityName": "Appointment",
          "schema": {
            "$ref": "#/backend/entities/Appointment"
          },
          "description": "Stores appointments booked by users. Uses path-based ownership; only the user can access their appointments.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "appointmentId",
              "description": "The unique identifier for the appointment."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores information about products sold in the e-commerce store.",
          "params": [
            {
              "name": "productId",
              "description": "The unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores orders placed by users. Uses path-based ownership; only the user can access their orders.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/orders/{orderId}/orderItems/{orderItemId}",
        "definition": {
          "entityName": "OrderItem",
          "schema": {
            "$ref": "#/backend/entities/OrderItem"
          },
          "description": "Stores items within an order. Uses path-based ownership, continuing the hierarchy.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "orderId",
              "description": "The unique identifier for the order."
            },
            {
              "name": "orderItemId",
              "description": "The unique identifier for the order item."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the Papi Hair Design application, focusing on online bookings, e-commerce, user accounts, and an admin dashboard. The structure prioritizes security, scalability, and maintainability by adhering to the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are Not Filters). Authorization Independence is achieved through denormalization of data where necessary, specifically within subcollections that inherit permissions from parent documents. This avoids the use of `get()` calls in security rules, which can hinder atomic operations. Structural Segregation ensures each collection contains documents with homogeneous security requirements, and Access Modeling standardizes authorization patterns using Path-Based Ownership and Membership Maps. The structure includes collections for `users`, `services`, `stylists`, `appointments`, `products`, `orders`, and `orderItems`. Path-based ownership is utilized for user-specific data like appointments and orders, while global roles (e.g., admin) can be managed via dedicated collections or potentially a `roles` field within the user document (depending on the complexity of role management, in this case, we assume no such role-based access). This approach ensures simpler and more robust security rules, facilitating secure `list` operations, and supporting the integrity of ownership, timestamps, and denormalized data."
  }
}