{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user account within the Papi Hair Design application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the user."
        },
        "address": {
          "type": "string",
          "description": "The address of the user."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email"
      ]
    },
    "Booking": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Booking",
      "type": "object",
      "description": "Represents a booking for a hair service at Papi Hair Design.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the booking entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Booking)"
        },
        "serviceId": {
          "type": "string",
          "description": "Reference to Service. (Relationship: Service 1:N Booking)"
        },
        "stylistId": {
          "type": "string",
          "description": "Reference to Stylist. (Relationship: Stylist 1:N Booking)"
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the booking.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the booking.",
          "format": "date-time"
        },
        "notes": {
          "type": "string",
          "description": "Any notes or special requests for the booking."
        },
        "status": {
          "type": "string",
          "description": "The status of the booking (e.g., 'pending', 'confirmed', 'completed', 'cancelled')."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the booking was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the booking was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "serviceId",
        "stylistId",
        "startTime",
        "endTime",
        "status"
      ]
    },
    "Service": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Service",
      "type": "object",
      "description": "Represents a hair service offered at Papi Hair Design.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the service entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the service (e.g., 'Men's Cut', 'Balayage', 'Hair Coloring')."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the service."
        },
        "price": {
          "type": "number",
          "description": "The price of the service."
        },
        "duration": {
          "type": "number",
          "description": "The duration of the service in minutes."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the image representing the service.",
          "format": "uri"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the service was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the service was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "price",
        "duration"
      ]
    },
    "Stylist": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Stylist",
      "type": "object",
      "description": "Represents a stylist at Papi Hair Design.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the stylist entity."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the stylist."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the stylist."
        },
        "bio": {
          "type": "string",
          "description": "A brief biography of the stylist."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the image representing the stylist.",
          "format": "uri"
        },
        "specialties": {
          "type": "array",
          "description": "Array of specialties of the stylist.",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the stylist was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the stylist was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product sold in the Papi Hair Design e-commerce store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the product."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the product."
        },
        "price": {
          "type": "number",
          "description": "The price of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the image representing the product.",
          "format": "uri"
        },
        "categoryId": {
          "type": "string",
          "description": "Reference to ProductCategory. (Relationship: ProductCategory 1:N Product)"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the product was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the product was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "price",
        "categoryId"
      ]
    },
    "ProductCategory": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProductCategory",
      "type": "object",
      "description": "Represents a category of products in the Papi Hair Design e-commerce store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product category entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the product category (e.g., 'Shampoo', 'Conditioner', 'Styling')."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the product category."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the product category was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the product category was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order placed in the Papi Hair Design e-commerce store.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Order)"
        },
        "orderDate": {
          "type": "string",
          "description": "The date the order was placed.",
          "format": "date-time"
        },
        "totalAmount": {
          "type": "number",
          "description": "The total amount of the order."
        },
        "status": {
          "type": "string",
          "description": "The status of the order (e.g., 'pending', 'processing', 'shipped', 'delivered', 'cancelled')."
        },
        "shippingAddress": {
          "type": "string",
          "description": "The shipping address for the order."
        },
        "billingAddress": {
          "type": "string",
          "description": "The billing address for the order."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the order was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the order was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "orderDate",
        "totalAmount",
        "status"
      ]
    },
    "OrderItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OrderItem",
      "type": "object",
      "description": "Represents an item within an order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order item entity."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:N OrderItem)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N OrderItem)"
        },
        "quantity": {
          "type": "number",
          "description": "The quantity of the product in the order item."
        },
        "price": {
          "type": "number",
          "description": "The price of the product in the order item."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the order item was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the order item was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "orderId",
        "productId",
        "quantity",
        "price"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.  Path-based ownership. Includes user's personal information and account details.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/bookings/{bookingId}",
        "definition": {
          "entityName": "Booking",
          "schema": {
            "$ref": "#/backend/entities/Booking"
          },
          "description": "Stores bookings associated with a user.  Path-based ownership for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the booking."
            },
            {
              "name": "bookingId",
              "description": "The unique identifier of the booking."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores orders associated with a user.  Path-based ownership for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who placed the order."
            },
            {
              "name": "orderId",
              "description": "The unique identifier of the order."
            }
          ]
        }
      },
      {
        "path": "/services/{serviceId}",
        "definition": {
          "entityName": "Service",
          "schema": {
            "$ref": "#/backend/entities/Service"
          },
          "description": "Stores information about hair services offered.",
          "params": [
            {
              "name": "serviceId",
              "description": "The unique identifier of the service."
            }
          ]
        }
      },
      {
        "path": "/stylists/{stylistId}",
        "definition": {
          "entityName": "Stylist",
          "schema": {
            "$ref": "#/backend/entities/Stylist"
          },
          "description": "Stores information about stylists.",
          "params": [
            {
              "name": "stylistId",
              "description": "The unique identifier of the stylist."
            }
          ]
        }
      },
      {
        "path": "/product_categories/{productCategoryId}",
        "definition": {
          "entityName": "ProductCategory",
          "schema": {
            "$ref": "#/backend/entities/ProductCategory"
          },
          "description": "Stores categories of products.",
          "params": [
            {
              "name": "productCategoryId",
              "description": "The unique identifier of the product category."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information.",
          "params": [
            {
              "name": "productId",
              "description": "The unique identifier of the product."
            }
          ]
        }
      },
      {
        "path": "/order_items/{orderItemId}",
        "definition": {
          "entityName": "OrderItem",
          "schema": {
            "$ref": "#/backend/entities/OrderItem"
          },
          "description": "Stores individual items within an order.",
          "params": [
            {
              "name": "orderItemId",
              "description": "The unique identifier of the order item."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to be secure, scalable, and easily debuggable, following the core design principles and strategy mandates. It avoids hierarchical authorization dependencies by denormalizing authorization data where necessary and uses structural segregation to ensure a homogeneous security posture within collections. Access modeling is standardized using path-based ownership and the membership map pattern.\n\nSpecifically, user-owned data (bookings, orders) is stored under the `/users/{userId}` path, ensuring clear ownership and simplified security rules. Global data (services, stylists, product categories, products) is stored in root-level collections. The `/users/{userId}/bookings/{bookingId}` and `/users/{userId}/orders/{orderId}` paths directly associate bookings and orders with users, making security rules straightforward and efficient.\n\nThe structure supports secure `list` operations (QAPs) by ensuring that collections contain documents with similar access requirements and by avoiding filtering within rules.  For example, listing bookings under `/users/{userId}/bookings` only requires checking if the user ID matches the authenticated user ID. Similarly, listing products or stylists in their respective root collections can be secured based on general read access rules, or more complex access control, if necessary.\n\nAuthorization Independence (CRITICAL):  The `/users/{userId}/bookings/{bookingId}` and `/users/{userId}/orders/{orderId}` collections achieve Authorization Independence because security rules only need to verify that `request.auth.uid == userId` to determine access.  There is no need to `get()` any parent document to determine access. This makes transactions and batch operations atomic and easier to debug.\n\nDBAC (No Custom Claims):  All roles are managed in the database itself, specifically within the user documents. Authorization will rely solely on `request.auth.uid` and data within the user document.\n\nQAPs (Rules are not Filters): The structure ensures that rules do not act as filters. For instance, listing bookings only requires verifying that the user ID matches the authenticated user, not filtering based on booking properties. Similarly, listing stylists, services, products, and product categories can be secured through simple read access rules."
  }
}